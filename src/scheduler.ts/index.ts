import cron from 'node-cron';
import dayjs from 'dayjs';
import { bot } from '../services/botService'; 
import { userRepository } from '../repositories/userRepository';
import { getWordForNumber } from '../utils/formatters';
import { birthdayRepository } from '../repositories/birthdayRepository';
import { MY_CHAT_ID } from '../config/constants';


// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
const sendBirthdayMessages = async () => {
    const birthdays = await birthdayRepository.findAll();
    const today = dayjs();

    const messages: string[] = [];

    for (const birthday of birthdays) {
        let birthdayDate = dayjs().set('month', birthday.month - 1).set('date', birthday.day);

        if (birthdayDate.isBefore(today)) {
            birthdayDate = birthdayDate.add(1, 'year');
        }

        const difference = birthdayDate.diff(today, 'days');
        const isToday = difference === 0;
        const isTomorrow = difference === 1;

        if (isToday) {
            messages.push(`–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç ${birthday.name}! –ü–æ–∑–¥—Ä–∞–≤—å—Ç–µ –µ–≥–æ/–µ–µ! üéâ`);
        } else if (isTomorrow) {
            messages.push(`${birthday.name} –∑–∞–≤—Ç—Ä–∞ –æ—Ç–º–µ—á–∞–µ—Ç –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!`);
        } else if (difference === 7 || difference === 3) {
            let messageTemplate = `${birthday.name} –±—É–¥–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${difference} ${getWordForNumber(difference, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}.`;
            if (difference === 7) {
                messageTemplate += ' –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Ö—É–π–Ω—é –Ω–∞ WB';
            }
            messages.push(messageTemplate);
        }
    }

    if (messages.length > 0) {
        const users = await userRepository.getAllUsers();

        for (const user of users) {
            try {
                await bot.sendMessage(user.chatId, messages.join('\n'));
            } catch (error) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId}:`, error);
            }
        }
    } else {
        await bot.sendMessage(MY_CHAT_ID, '–ú–∏—à–∞–Ω—è, –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è –≤ –¥–µ–ª–µ!');
    }
};

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–ø–∏—Å–∫–µ
const sendUnsubscribeReminder = async () => {
    const users = await userRepository.getAllUsers();

    for (const user of users) {
        try {
            await bot.sendMessage(user.chatId, '–ú–ê–®–ê, –û–¢–ú–ï–ù–ò –ï–ë–£–ß–£–Æ –ü–û–î–ü–ò–°–ö–£ –í –û–ö–ö–û');
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId}:`, error);
        }
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö cron-–∑–∞–¥–∞—á
export const setupSchedulers = () => {
    // –ó–∞–¥–∞—á–∞ –Ω–∞ 11 —É—Ç—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    cron.schedule('0 11 * * *', sendBirthdayMessages, {
        timezone: 'Asia/Yekaterinburg',
    });

    // –ó–∞–¥–∞—á–∞ –Ω–∞ 11 —É—Ç—Ä–∞ 13 –¥–µ–∫–∞–±—Ä—è
    cron.schedule('0 11 13 12 *', sendUnsubscribeReminder, {
        timezone: 'Asia/Yekaterinburg',
    });

    // cron.schedule('* * * * *', sendBirthdayMessages);
};
