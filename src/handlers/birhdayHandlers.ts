import { Message } from "node-telegram-bot-api";
import { bot } from "../services/botService";
import { COMMANDS, MESSAGES } from "./commands/types";
import { isValidDate } from "../utils/dateUtils";
import { birthdayRepository } from "../repositories/birthdayRepository";
import dayjs from "dayjs";

const DATE_REGEX = `(\\d{1,2})\\.(\\d{1,2})(?:\\.(\\d{4}))?`;


export const setupBirthDayHandlers = () => {
    bot.onText(new RegExp(`^${COMMANDS.ADD} (.+) ${DATE_REGEX}`), async (msg: Message, match) => {
        try {
            if (!match || !match[1]) {
                await bot.sendMessage(msg.chat.id, MESSAGES.ERROR.INVALID_FORMAT);
                return;
            }

            const name = match[1];
            const day = parseInt(match[2]);
            const month = parseInt(match[3]?? '01');
            const year = match[4]? parseInt(match[4]) : dayjs().year();

            if (!name) {
                await bot.sendMessage(msg.chat.id, MESSAGES.ERROR.INVALID_FORMAT);
                return;
            }

            if (!isValidDate(day, month)) {
                await bot.sendMessage(msg.chat.id, MESSAGES.ERROR.INVALID_DATE);
                return;
            }

            const birthday = await birthdayRepository.create({
                name,
                day,
                month,
                year,
            });

            await bot.sendMessage(
                msg.chat.id,
                `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ${birthday.name} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}${year ? `.${year}` : ''} üéÇ`
            );
        } catch (error) {
            console.error('Error in add command:', error);
            await bot.sendMessage(msg.chat.id, MESSAGES.ERROR.GENERAL);
        }
    });

    bot.onText(new RegExp(`^${COMMANDS.UPCOMING}`), async (msg) => listBirthdays(msg.chat.id))

    bot.onText(new RegExp(`^${COMMANDS.DELETE} (.+)$`), async (msg: Message, match) => {
        try {
            if (!match || !match[1]) {
                await bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete [–∏–º—è]');
                return;
            }

            const name = match[1].trim();
    
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ
            const birthdayEntry = await birthdayRepository.getBirthdayBoyByName(name)
    
            if (!birthdayEntry) {
                await bot.sendMessage(msg.chat.id, `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏ "${name}".`);
                return;
            } else {
                await birthdayRepository.deleteBirthDay(birthdayEntry.id)
            }

            await bot.sendMessage(msg.chat.id, `–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è "${name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
        } catch (error) {
            console.error('Error in /delete command:', error);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    });

    bot.onText(new RegExp(`^${COMMANDS.SEARCH} (.+)$`), async (msg: Message, match) => {
        try {
            if (!match || !match[1]) {
                await bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –ü–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /search [–∏–º—è]');
                return;
            }

            const name = match[1].trim();
    
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ
            const birthdayEntry = await birthdayRepository.getBirthdayBoysByName(name)
    
            if (!birthdayEntry.length) {
                await bot.sendMessage(msg.chat.id, `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏ "${name}".`);
                return;
            }

            birthdayEntry.forEach(async (birthday) => {
                const { day, month } = birthday;

                await bot.sendMessage(msg.chat.id, `–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è "${birthday.name}" —Å–æ—Å—Ç–æ–∏—Ç—Å—è ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}`);
            })
        } catch (error) {
            console.error('Error in /search command:', error);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    });
    
}

export async function listBirthdays(chatId: number) {
    const birthdays = await birthdayRepository.findAll();

    if (birthdays.length === 0) {
        bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç.');
        return;
    }

    const currentDate = dayjs();
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ, –Ω–∞—á–∏–Ω–∞—è —Å –±–ª–∏–∂–∞–π—à–∏—Ö
    const sortedBirthdays = birthdays
        .map(({ name, day, month }) => {
           // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ dayjs –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
           const birthdayDate = dayjs().set('month', month - 1).set('date', day);
           // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –∏ –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
           if (birthdayDate.isBefore(currentDate, 'day')) {
               return { name, day, month, date: birthdayDate.add(1, 'year') }; // –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
           }
           return { name, day, month, date: birthdayDate };
       })
        .sort((a, b) => a.date.diff(b.date)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ

    const birthdayList = sortedBirthdays
        .map(({ name, day, month }) => `${name} ‚Äî ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}`)
        .join('\n');

    bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –≥—Ä—è–¥—É—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n${birthdayList}`);
}