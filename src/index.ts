import { Birthday, PrismaClient, User } from '@prisma/client';
import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import dayjs from 'dayjs';

const prisma = new PrismaClient();

const token = process.env.TELEGRAM_BOT_TOKEN;

const ADD_USER_TOOLTIP = '–ù–∞–ø–∏—à–∏—Ç–µ /add [–∏–º—è] [–¥–µ–Ω—å].[–º–µ—Å—è—Ü].[–≥–æ–¥(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)] –ù–∞–ø—Ä–∏–º–µ—Ä, "/add –ú–∞—Ä–∏—è 25.05.2024" –∏–ª–∏ "/add –ú–∞—Ä–∏—è 25.5"'
const MY_CHAT_ID = 719127303


if (!token) {
  console.error('Error: TELEGRAM_BOT_TOKEN environment variable is not set.');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const message = '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ –∑–∞–±—ã—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:';

    const keyboard = [
        [
            {
                text: '–°–ø–∏—Å–æ–∫ –î–†',
                callback_data: '/list'
            },
            {
                text: '–î–æ–±–∞–≤–∏—Ç—å –î–†',
                callback_data: '/add'
            }
        ],
    ];

    const options = {
        reply_markup: {
            keyboard: [
                ['–î–æ–±–∞–≤–∏—Ç—å –î–†', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –î–†']
            ],
            inline_keyboard: keyboard,
            resize_keyboard: true,
        }
    };
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat.id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    const user = await getUserByChatId(chatId);

    if (!user) {
        await saveUserId(chatId);
    }

    bot.sendMessage(chatId, message, options);
})

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '–î–æ–±–∞–≤–∏—Ç—å –î–†') {
        bot.sendMessage(chatId, ADD_USER_TOOLTIP);
    } else if (text === '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –î–†') {
        bot.sendMessage(chatId, '–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...');
        listBirthdays(chatId)
    }
});

bot.onText(/\/add (.+) (\d{1,2})\.(\d{1,2})(?:\.(\d{4}))?/, async (msg, match) => {
    console.log('msg: ', msg);

    if (!match) {
        bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /add [–∏–º—è] [–¥–µ–Ω—å].[–º–µ—Å—è—Ü]. –ù–∞–ø—Ä–∏–º–µ—Ä, /add –ú–∞—Ä–∏—è 25.05.2024 –∏–ª–∏ /add –ú–∞—Ä–∏—è 25.5');
        return;
    }

    if (!match[1]) {
        bot.sendMessage(msg.chat.id, '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        return;
    }

    if (parseInt(match[2]) < 1 || parseInt(match[2]) > 31) {
        bot.sendMessage(msg.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å.');
        return;
    }

    if(parseInt(match[3]) < 1 || parseInt(match[3]) > 12) {
        bot.sendMessage(msg.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü.');
        return;
    }

    const name = match[1];
    const day = parseInt(match[2]);
    const month = parseInt(match[3]?? '01');
    const year = match[4]? parseInt(match[4]) : dayjs().year();

    await addBirthday(name, day, month, year);
    bot.sendMessage(msg.chat.id, `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ${name} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}`);
})

bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message?.chat.id;
    const message = callbackQuery.data;

    if (!chatId) {
        return;
    }

    if (message === '/list') {
        bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...');
        listBirthdays(chatId)
    } else if (message === '/add') {
        bot.sendMessage(chatId, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add [–∏–º—è] [–¥–µ–Ω—å] [–º–µ—Å—è—Ü].');
    }
});

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
async function listBirthdays(chatId: number) {
    const birthdays = await getBirthdays();

    if (birthdays.length === 0) {
        bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç.');
        return;
    }

    const currentDate = dayjs();
       // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ, –Ω–∞—á–∏–Ω–∞—è —Å –±–ª–∏–∂–∞–π—à–∏—Ö
    const sortedBirthdays = birthdays
        .map(({ name, day, month }) => {
           // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ dayjs –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
           const birthdayDate = dayjs().set('month', month - 1).set('date', day);
           // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –∏ –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
           if (birthdayDate.isBefore(currentDate, 'day')) {
               return { name, day, month, date: birthdayDate.add(1, 'year') }; // –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
           }
           return { name, day, month, date: birthdayDate };
       })
        .sort((a, b) => a.date.diff(b.date)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ

    const birthdayList = sortedBirthdays
        .map(({ name, day, month }) => `${name} ‚Äî ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}`)
        .join('\n');

    bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –≥—Ä—è–¥—É—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n${birthdayList}`);
}

// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
bot.onText(/\/list/, async (msg) => {
    const birthdays = await getBirthdays();

    const chatId = msg.chat.id;
    if (birthdays.length === 0) {
        bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç.');
        return;
    }

    const currentDate = dayjs();
       // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ, –Ω–∞—á–∏–Ω–∞—è —Å –±–ª–∏–∂–∞–π—à–∏—Ö
    const sortedBirthdays = birthdays
        .map(({ name, day, month }) => {
           // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ dayjs –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
           const birthdayDate = dayjs().set('month', month - 1).set('date', day);
           // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –∏ –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
           if (birthdayDate.isBefore(currentDate, 'day')) {
               return { name, day, month, date: birthdayDate.add(1, 'year') }; // –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
           }
           return { name, day, month, date: birthdayDate };
       })
        .sort((a, b) => a.date.diff(b.date)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ

    const birthdayList = sortedBirthdays
        .map(({ name, day, month }) => `${name} ‚Äî ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}`)
        .join('\n');

    bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –≥—Ä—è–¥—É—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n${birthdayList}`);
});

bot.onText(/\/birthdays/, async (msg) => {
    const birthdays = await getBirthdays();

    if (birthdays.length === 0) {
        bot.sendMessage(msg.chat.id, '–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.');
        return;
    }

    const currentDate = dayjs();
    const messages: string[] = [];

    for (const birthday of birthdays) {
        const birthdayDate = dayjs().set('month', birthday.month - 1).set('date', birthday.day);
        const difference = birthdayDate.diff(currentDate, 'days');
        const isToday = difference === 0;
        const isTomorrow = difference === 1;

        if (isToday) {
            messages.push(`${birthday.name} —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—á–∞–µ—Ç –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!`);
        } else if (isTomorrow) {
            messages.push(`${birthday.name} –∑–∞–≤—Ç—Ä–∞ –æ—Ç–º–µ—á–∞–µ—Ç –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!`);
        } else if (difference > 1 && difference <= 7) {
            messages.push(`${birthday.name} —Ä–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${difference} ${getWordForNumber(difference, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}.`);
        } 
    }

    if (messages.length > 0) {
        bot.sendMessage(msg.chat.id, messages.join('\n'));
    } else {
        bot.sendMessage(msg.chat.id, '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.');
    }

})

async function addBirthday(name: string, day: number, month: number, year?: number) {
    await prisma.birthday.create({
        data: {
            name,
            day,
            month,
            year,
        },
    });

    console.log(`–î–æ–±–∞–≤–ª–µ–Ω ${name} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
const sendBirthdayMessages = async () => {
    const birthdays = await getBirthdays();
    const today = dayjs();

    const messages: string[] = [];

    for (const birthday of birthdays) {
        let birthdayDate = dayjs().set('month', birthday.month - 1).set('date', birthday.day);

        if (birthdayDate.isBefore(today)) {
            birthdayDate = birthdayDate.add(1, 'year');
        }

        const difference = birthdayDate.diff(today, 'days');
        const isToday = difference === 0;
        const isTomorrow = difference === 1;

        if (isToday) {
            messages.push(`–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç ${birthday.name}! –ü–æ–∑–¥—Ä–∞–≤—å—Ç–µ –µ–≥–æ/–µ–µ! üéâ`);
        } else if (isTomorrow) {
            messages.push(`${birthday.name} –∑–∞–≤—Ç—Ä–∞ –æ—Ç–º–µ—á–∞–µ—Ç –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!`);
        } else if (difference === 7 || difference === 3) {
            messages.push(`${birthday.name} –±—É–¥–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${difference} ${getWordForNumber(difference, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}.`);
        }
    }

    if (messages.length > 0) {
        const users = await getAllUsers();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for (const user of users) {
            try {
                await bot.sendMessage(user.chatId, messages.join('\n'));
            } catch (error) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId}:`, error);
            }
        }
    } else {
        await bot.sendMessage(MY_CHAT_ID, '–ú–∏—à–∞–Ω—è, –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è –≤ –¥–µ–ª–µ!');
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á–∏ –Ω–∞ 11 —É—Ç—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
cron.schedule('0 11 * * *', sendBirthdayMessages, {
    timezone: 'Asia/Yekaterinburg',
});

// cron.schedule('* * * * *', sendBirthdayMessages);

async function getBirthdays(): Promise<Birthday[]> {

    return await prisma.birthday.findMany();
}

function getWordForNumber(number: number, words: string[]): string {
    const lastDigit = number % 10;

    if (lastDigit === 1 && number % 100 !== 11) {
        return words[0];
    }

    if (lastDigit >= 2 && lastDigit <= 4 && (number % 100 < 10 || number % 100 >= 20)) {
        return words[1];
    }

    return words[2];
}

async function  getUserByChatId(chatId: number): Promise<User | null> {
    const user = await prisma.user.findUnique({
        where: { chatId },
    });

    return user;
}

async function saveUserId(userId: number) {
    await prisma.user.create({
        data: {
            chatId: userId,
        },
    });
}

async function getAllUsers() {
    return await prisma.user.findMany();
}